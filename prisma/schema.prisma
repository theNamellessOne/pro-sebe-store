// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  relationMode = "prisma"
  provider     = "mysql"
  url          = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

// PRODUCT INFO

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

model Product {
  article String @id

  status ProductStatus

  name        String
  description String

  price          Decimal
  compareAtPrice Decimal

  variants          Variant[]
  productCategories ProductCategory[]

  @@index([price])
  @@index([status])
  @@index([article])
  @@index([status, price])
  @@index([article, price])
  @@index([price, status])
  @@index([price, article])
  @@index([status, article])
  @@index([status, article, price])
  @@fulltext([name, description, article])
}

// PRODUCT VARIANTS INFO

model Variant {
  id String @id 

  name String

  reserved Int
  quantity Int

  product        Product @relation(fields: [productArticle], references: [article])
  productArticle String

  color   Color @relation(fields: [colorId], references: [id])
  colorId Int

  size   Size @relation(fields: [sizeId], references: [id])
  sizeId Int

  mediaUrls MediaUrl[]
  cartItems CartItem[]

  @@index([sizeId])
  @@index([colorId])
  @@index([productArticle])
  @@index([productArticle, quantity, sizeId, colorId])
}

model MediaUrl {
  id  Int    @id @default(autoincrement())
  url String @default("")

  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId String

  @@index([variantId])
}

model Color {
  id Int @id @default(autoincrement())

  name     String
  hexValue String
  variant  Variant[]

  @@fulltext([name])
}

model Size {
  id Int @id @default(autoincrement())

  chestSize Int
  waistSize Int
  thighSize Int

  name    String
  variant Variant[]

  @@fulltext([name])
}

// CATEGORY INFO

model Category {
  id   Int    @id @default(autoincrement())
  name String
  path String

  // this one is kinda problematic
  // with prisma it is impossible to have proper onDelete and onUpdate actions generated automatically
  // so we will have to manage that stuff ourselves in code
  parent   Category?  @relation("SubCategories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId Int?
  children Category[] @relation("SubCategories")

  imageUrl String?

  productCategores ProductCategory[]

  @@index([parentId])
  @@fulltext([name])
}

model ProductCategory {
  id Int @id @default(autoincrement())

  product        Product @relation(fields: [productArticle], references: [article])
  productArticle String

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int

  @@index([categoryId])
  @@index([productArticle])
}

// USER INFO

enum Role {
  USER
  PACKAGER
  MODERATOR
  OWNER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model User {
  id String @id @default(cuid())

  image    String?
  accounts Account[]
  sessions Session[]

  name     String?
  surname  String?
  username String? @unique

  email         String?   @unique
  emailVerified DateTime?
  phone         String?   @unique
  password      String?

  role Role @default(USER)

  twoFactorConfirmation TwoFactorConfirmation?

  reviews   Review[]
  addresses AddressParts[]

  cart Cart?
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model SendEmailToken {
  id      String   @id @default(cuid())
  token   String   @unique
  expires DateTime
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// REVIEW INFO

enum ReviewStatus {
  ON_MODERATION
  APPROVED
}

model Review {
  id Int @id @default(autoincrement())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  content String       @db.VarChar(512)
  status  ReviewStatus @default(ON_MODERATION)

  @@index([userId])
  @@index([status])
  @@fulltext([content])
}

// CART

model Cart {
  id        String     @id @default(cuid())
  user      User?      @relation(fields: [userId], references: [id])
  userId    String?    @unique
  subtotal  Decimal
  cartItems CartItem[]
}

model CartItem {
  id Int @id @default(autoincrement())

  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId String

  quantity Int
  subtotal Decimal

  cart   Cart?   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId String?

  @@index([cartId])
  @@index([variantId])
}

// ORDER INFO

model AddressParts {
  id Int @id @default(autoincrement())

  user   User?  @relation(fields: [userId], references: [id])
  userId String

  postCode Int

  city   String
  region String
  street String

  flat     String
  note     String
  block    String?
  building String

  @@index([userId])
}

enum OrderStatus {
  CREATED
  PAID
  PACKED
  DELIVERED
  CANCELED
}

enum OrderPaymentType {
  PREPAID
  POSTPAID
}

enum OrderDeliveryType {
  COURIER
  WAREHOUSE
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  name       String
  surname    String
  middlename String

  phone String
  email String

  orderDeliveryType OrderDeliveryType

  settlementRef String

  street       String?
  houseNo      String?
  postalIdx    String?
  warehouseKey String?

  paymentType OrderPaymentType

  orderItems OrderItem[]

  total Decimal

  status OrderStatus @default(CREATED)

  @@index([status])
  @@index([status, createdAt])
  @@fulltext([name, surname, middlename, email, phone])
}

model OrderItem {
  id String @id @default(cuid())

  productName    String
  productArticle String

  variantName         String
  variantImgUrl       String
  variantSellingPrice Decimal

  quantity Int
  subtotal Decimal

  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String

  @@index([orderId])
  @@fulltext([variantName, productName])
}

// BANNER INFO

model Banner {
  id            Int     @id @default(autoincrement())
  name          String
  imageUrl      String
  shouldBeOnTop Boolean

  @@fulltext([name])
}

// MISC

model Misc {
  id Int @id @default(autoincrement())

  freeDeliveryMinPrice Int
  secondOrderDiscount  Int
  avgDeliveryTime      Int
}
