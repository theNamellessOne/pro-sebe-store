// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  relationMode = "prisma"
  provider     = "mysql"
  url          = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

// PRODUCT INFO

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

model Product {
  article String @id

  status ProductStatus

  name        String
  description String

  price          Decimal
  compareAtPrice Decimal

  variants          Variant[]
  productCategories ProductCategory[]
}

// PRODUCT VARIANTS INFO

model Variant {
  id Int @id @default(autoincrement())

  name String

  reserved Int
  quantity Int

  product        Product @relation(fields: [productArticle], references: [article])
  productArticle String

  color   Color @relation(fields: [colorId], references: [id])
  colorId Int

  size   Size @relation(fields: [sizeId], references: [id])
  sizeId Int

  orderItems OrderItem[]
  mediaUrls  MediaUrl[]

  @@index([productArticle])
  @@index([colorId])
  @@index([sizeId])
}

model MediaUrl {
  id  Int    @id @default(autoincrement())
  url String @default("")

  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId Int

  @@index([variantId])
}

model Color {
  id Int @id @default(autoincrement())

  name     String
  hexValue String
  variant  Variant[]

  @@fulltext([name])
}

model Size {
  id Int @id @default(autoincrement())

  chestSize Int
  waistSize Int
  thighSize Int

  name    String
  variant Variant[]
}

// CATEGORY INFO

model Category {
  id   Int    @id @default(autoincrement())
  name String
  path String

  // this one is kinda problematic
  // with prisma it is impossible to have proper onDelete and onUpdate actions generated automatically
  // so we will have to manage that stuff ourselves in code
  parent   Category?  @relation("SubCategories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId Int?
  children Category[] @relation("SubCategories")

  imageUrl String?

  productCategores ProductCategory[]

  @@index([parentId])
}

model ProductCategory {
  id Int @id @default(autoincrement())

  product        Product @relation(fields: [productArticle], references: [article])
  productArticle String

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int

  @@index([productArticle])
  @@index([categoryId])
}

// USER INFO

enum Role {
  USER
  PACKAGER
  MODERATOR
  OWNER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id String @id @default(cuid())

  image    String?
  accounts Account[]
  sessions Session[]

  name String?

  email         String?   @unique
  emailVerified DateTime?
  phone         String?   @unique
  password      String?

  role Role @default(USER)

  reviews   Review[]
  addresses AddressParts[]
}

// REVIEW INFO

enum ReviewStatus {
  ON_MODERATION
  APPROVED
}

model Review {
  id Int @id @default(autoincrement())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  content String
  status  ReviewStatus @default(ON_MODERATION)

  @@index([userId])
}

// ORDER INFO

model AddressParts {
  id Int @id @default(autoincrement())

  user   User?  @relation(fields: [userId], references: [id])
  userId String

  postCode Int

  city   String
  region String
  street String

  flat     String
  note     String
  block    String?
  building String

  orders Order[]

  @@index([userId])
}

enum OrderStatus {
  CREATED
  PACKED
  DELIVERED
}

model Order {
  id         Int     @id @default(autoincrement())
  isPayedFor Boolean @default(false)

  addressParts   AddressParts? @relation(fields: [addressPartsId], references: [id])
  addressPartsId Int?

  divisionNumber Int?
  orderItems     OrderItem[]

  status OrderStatus @default(CREATED)

  @@index([addressPartsId])
}

model OrderItem {
  id Int @id @default(autoincrement())

  variant   Variant @relation(fields: [variantId], references: [id])
  variantId Int

  amount   Int
  subTotal Decimal

  order   Order @relation(fields: [orderId], references: [id])
  orderId Int

  @@index([orderId])
  @@index([variantId])
}

// BANNER INFO

model Banner {
  id            Int     @id @default(autoincrement())
  name          String
  imageUrl      String
  shouldBeOnTop Boolean
}

// MISC

model Misc {
  id Int @id @default(autoincrement())

  freeDeliveryMinPrice Int
  secondOrderDiscount Int 
  avgDeliveryTime Int
}
